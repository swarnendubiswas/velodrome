DoubleChecker: Efficient Sound and Precise Atomicity Checking

Swarnendu Biswas, Jipeng Huang, Aritra Sengupta, and Michael Bond
The Ohio State University
April 2014

This document gives a brief description of the project, code, and instructions
to build, and execute the projects.


IMPLEMENTATION

Swarnendu Biswas

I would like to thank Michael Bond for his support and advice during the project
and in implementation. I would also like to thank Octet collaborators and other
members of our group, Michael Bond, Man Cao, Minjia Zhang, Meisam Fathi Salmi,
Aritra Sengupta, and Jipeng Huang, for discussions and advice.


OVERVIEW

DoubleChecker is a novel sound and precise dynamic atomicity checker whose key
insight lies in its use of two new cooperating dynamic analyses. Its imprecise
analysis tracks inter-thread dependences soundly but imprecisely with
significantly better performance than a fully precise analysis. Its precise
analysis is more expensive but only needs to process parts of execution
identified as potentially involved in atomicity violations. DoubleChecker can
operate in either of two modes: the single-run mode is fully sound, while the
multi-run mode trades accuracy for performance.

We have implemented DoubleChecker and an existing state-of-the-art atomicity
checker called Velodrome in a high-performance Java virtual machine.
DoubleChecker's single-run and multi-run modes significantly outperform
Velodrome, while still providing full soundness and precision. These results
suggest that DoubleChecker's approach is a promising direction for improving the
performance of dynamic atomicity checking over prior work.

The following paper presents DoubleChecker in more detail: 

Swarnendu Biswas, Jipeng Huang, Aritra Sengupta, and Michael
Bond. DoubleChecker: Efficient Sound and Precise Atomicity Checking. PLDI 2014.


USING THE PATCH

We have provided four patches, one for each implementation. We describe each of
them in turn.

1) doublechecker-single-run - This project implements the DoubleChecker
algorithm in the single-run mode.

2) doublechecker-first-run - This project implements the imprecise cycle
detection (ICD) pass in the DoubleChecker algorithm. This is the first run in
the multi-run mode.

3) doublechecker-second-run - This project implements both the precise and
imprecise passes that are part of the second run in the DoubleChecker algorithm
in the multi-run mode. However instead of instrumenting all program accesses, it
only instruments those program locations that the first pass identifies as
possibly involved in atomicity violation.

4) velodrome-sound - This project implements the Velodrome algorithm. The link
to the Velodrome paper is: http://dl.acm.org/citation.cfm?id=1375618. To have a
sound implementation, we encapsulate each program access in small critical
sections to avoid loss of metadata updates due to potential data races.

It is probably easier to create separate (four) Jikes RVM projects for each
patch. 

1) Move to the project root directory ${RVMROOT} (<path-to-jikesrvm-3.1.3>). 

$ cd ${RVMROOT}

2) Copy the desired patch file to ${RVMROOT}. 

3) To apply the patch to Jikes RVM 3.1.3, use:

$ patch -p2 < <project_name>.patch


BUILDING THE PROJECTS

Build DoubleChecker single run:

$ ant -Dhost.name=x86_64-linux -Dconfig.name=FastAdaptiveGenImmix -Dconfig.variant=AVDASDefault -Dconfig.config-class=org.jikesrvm.config.AVDASDefault

Build DoubleChecker first run:

$ ant -Dhost.name=x86_64-linux -Dconfig.name=FastAdaptiveGenImmix -Dconfig.variant=AVDCycleDetection -Dconfig.config-class=org.jikesrvm.config.AVDCycleDetection

Build DoubleChecker second run:

$ ant -Dhost.name=x86_64-linux -Dconfig.name=FastAdaptiveGenImmix -Dconfig.variant=AVDDefault -Dconfig.config-class=org.jikesrvm.config.AVDDefault

Build Velodrome:

$ ant -Dhost.name=x86_64-linux -Dconfig.name=FastAdaptiveGenImmix -Dconfig.variant=VelodromeASDefault -Dconfig.config-class=org.jikesrvm.config.VelodromeASDefault


EXECUTING THE PROJECTS

Before you can execute a project, you need to create a symlink in your $HOME
directory for the project.

For any (single, first or the second) DoubleChecker run:
$ cd ; ln -s ${RVMROOT} avdRvmRoot

For Velodrome:
$ cd ; ln -s ${RVMROOT} velodromeRvmRoot

After building, you can run a configuration with this command:

$ ${RVMROOT}/dist/rvm/${WHATEVER_PREFIX}_${CONFIG_NAME}_${WHATEVER_SUFFIX}/rvm [JVM arguments] [application arguments]

Some examples:

Run DoubleChecker single run with avrora:

$ cd ; ln -s ${RVMROOT} avdRvmRoot
$ ${RvmRoot}/dist/FastAdaptiveGenImmix_AVDASDefault_x86_64-linux/rvm -X:vm:errorsFatal=true -X:vm:measureCompilation=true -X:vm:measureCompilationPhases=true -X:vm:benchmarkName=avrora9 -Xmx2400M -cp <path-to-dacapo-9.12-bach.jar> Harness -s small -c MMTkCallback -n 1 avrora

Run DoubleChecker first run with avrora:

$ cd ; ln -s ${RVMROOT} avdRvmRoot
$ ${RvmRoot}/dist/FastAdaptiveGenImmix_AVDCycleDetection_x86_64-linux/rvm -X:vm:errorsFatal=true -X:vm:measureCompilation=true -X:vm:measureCompilationPhases=true -X:vm:octetIODir=/home/biswass/exp-output/temp/avrora9/adapt/gc_default/AVDCycleDetection/all/DEFAULT/var/small/1 -X:vm:staticRaceDir=/home/biswass/benchmarks/static_race_results/avrora9.txt -X:vm:benchmarkName=avrora9 -Xmx2400M -cp /home/biswass/benchmarks/dacapo-9.12-bach.jar Harness -s small -c MMTkCallback -n 1 avrora

Run DoubleChecker second run with avrora:

$ cd ; ln -s ${RVMROOT} avdRvmRoot
$ ${RvmRoot}/dist/FastAdaptiveGenImmix_AVDDefault_x86_64-linux/rvm -X:vm:errorsFatal=true -X:vm:measureCompilation=true -X:vm:measureCompilationPhases=true -X:vm:octetIODir=/home/biswass/exp-output/temp/avrora9/adapt/gc_default/AVDDefault/all/DEFAULT/var/small/1 -X:vm:staticRaceDir=/home/biswass/benchmarks/static_race_results/avrora9.txt -X:vm:benchmarkName=avrora9 -Xmx2400M -cp /home/biswass/benchmarks/dacapo-9.12-bach.jar Harness -s small -c MMTkCallback -n 1 avrora

Run Velodrome with avrora:

$ cd ; ln -s ${RVMROOT} velodromeRvmRoot
$ ${RvmRoot}/dist/FastAdaptiveGenImmix_VelodromeASDefault_x86_64-linux/rvm -X:vm:errorsFatal=true -X:vm:measureCompilation=true -X:vm:measureCompilationPhases=true -X:vm:benchmarkName=avrora9 -Xmx2600M -cp <path-to-dacapo-9.12-bach.jar> Harness -s small -c MMTkCallback -n 1 avrora

Only GenImmix is currently supported for GC changes in DoubleChecker, while all
collectors are supported for Velodrome. It is possible to support other
collectors in DoubleChecker as well.


BRIEF GUIDE TO THE SOURCE CODE

Our implementations build on Jikes RVM 3.1.3. You can use Eclipse to view and/or
modify the source code. Please refer to the Jikes RVM resources on how to set up
Jikes in Eclipse.
 
You can do a global text search (Ctrl+H in Eclipse) and search for "AVD:" to
find all the places where we have modified Jikes RVM 3.1.3 in order to implement
DoubleChecker. To search for Velodrome-related changes, search for the string
"Velodrome:". Octet-specific changes are tagged with "Octet:".

Some key classes:

AVDAnalysis
AVDStateTransfers
AVDLogger
AVDBarriers
AVDPhase2Thread
VelodromeAnalysis
VelodromeBarriers
TransactionalHBGraph
VelodromeBaselineInstr


QUESTIONS

Questions, comments, and other feedback are welcome and encouraged:
biswass@cse.ohio-state.edu

